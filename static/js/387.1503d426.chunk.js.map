{"version":3,"file":"static/js/387.1503d426.chunk.js","mappings":"gQAEaA,E,OAAcC,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gE,SCmErC,EA/Da,WACT,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAA0BC,EAAAA,EAAAA,UAAS,CAACC,KAAM,KAAIC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAAvCK,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAuBtB,OArBAI,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEaC,EAAAA,EAAAA,IAAU,sCAADC,OACQpB,EAAO,YAC7C,CACEqB,QAAS,CACPC,cAAc,UAADF,OAAYG,mPACzBC,OAAQ,sBAGZ,KAAD,EARKT,EAAQC,EAAAS,KASdjB,EAASO,EAASW,MAAMV,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAW,GAAAX,EAAA,SAExBY,QAAQC,MAAM,wBAAuBb,EAAAW,IAAS,yBAAAX,EAAAc,OAAA,GAAAhB,EAAA,kBAErD,kBAfc,OAAAH,EAAAoB,MAAA,KAAAC,UAAA,KAiBftB,GACJ,GAAG,CAACV,IAEsB,IAAtBO,EAAMH,KAAK6B,QACJC,EAAAA,EAAAA,KAAA,OAAAC,SAAK,qDAIdC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,aAEHD,EAAAA,EAAAA,KAAA,MAAAC,SACG5B,EAAMH,KAAKiC,KAAI,SAAAC,GAAG,OACjBF,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACED,EAAAA,EAAAA,KAACtC,EAAW,CACV2C,IAAG,mCAAAnB,OAAqCkB,EAAIE,cAC5CC,IAAKH,EAAII,iBAEXN,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CACGG,EAAII,eACLN,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,cAAYG,EAAIK,kBAPdL,EAAIM,GASR,QAKjB,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ProfilePath = styled.img`\n  width: 50px;\n  height: auto;\n  margin: 10px 5px;\n`;\n","import { useEffect, useState } from \"react\";\nimport { useParams } from 'react-router-dom';\nimport axios from \"axios\";\nimport { PropTypes } from 'prop-types';\nimport { ProfilePath } from './Cast.styled';\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [movie, setMovie] = useState({cast: []});\n\n    useEffect(() => {\n        const fetchCast = async () => {\n            try {\n                const response = await axios.get(\n                  `https://api.themoviedb.org/3/movie/${movieId}/credits`,\n                  {\n                    headers: {\n                      Authorization: `Bearer ${process.env.REACT_APP_BEARER_TOKEN}`,\n                      Accept: 'application/json',\n                    },\n                  }\n                );\n                setMovie(response.data);\n            } catch (error) {\n                console.error(\"Error fetching cast: \", error);\n            }\n        }\n           \n        fetchCast();\n    }, [movieId]);\n\n    if (movie.cast.length === 0) {\n        return <div>Sorry, the cast is not available for this movie</div>;\n    }\n\n    return (\n      <div>\n        Cast Page\n        <ul>\n          {movie.cast.map(cas => (\n            <li key={cas.id}>\n              <ProfilePath\n                src={`https://image.tmdb.org/t/p/w500/${cas.profile_path}`}\n                alt={cas.original_name}\n              />\n              <div>\n                {cas.original_name}\n                <p>Character: {cas.character}</p>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n};\n\nCast.propTypes = {\n    movie: PropTypes.shape({\n        cast: PropTypes.arrayOf(\n            PropTypes.shape({\n                id: PropTypes.number.isRequired,\n                original_name: PropTypes.string,\n                profile_path: PropTypes.string,\n                character: PropTypes.string\n            })\n        )\n    }),\n}\n\nexport default Cast;"],"names":["ProfilePath","styled","_templateObject","_taggedTemplateLiteral","movieId","useParams","_useState","useState","cast","_useState2","_slicedToArray","movie","setMovie","useEffect","fetchCast","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","axios","concat","headers","Authorization","process","Accept","sent","data","t0","console","error","stop","apply","arguments","length","_jsx","children","_jsxs","map","cas","src","profile_path","alt","original_name","character","id"],"sourceRoot":""}